[{"C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\reportWebVitals.js":"1","C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\App.js":"2","C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\index.js":"3"},{"size":362,"mtime":1611583088448,"results":"4","hashOfConfig":"5"},{"size":2706,"mtime":1611671372059,"results":"6","hashOfConfig":"7"},{"size":549,"mtime":1611589306340,"results":"8","hashOfConfig":"7"},{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2j37xu",{"filePath":"11","messages":"12","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"13"},"1ti2zja",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\reportWebVitals.js",[],"C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\App.js",["16","17","18"],"import styled from '@emotion/styled';\nimport randomColor from 'randomcolor';\nimport { useState } from 'react';\nimport './App.css';\n\nconst StyledP = styled.p`\n  color: #4287f5;\n  background-color: ${(props) => props.color};\n  font-size: 40px;\n  transition: background-color 2s;\n`;\n\nconst StyledBox = styled.p`\n  ${(props) => console.log('props.height: ', props.height)}\n  ${(props) => console.log('props.width: ', props.width)}\n  height: ${(props) => props.height + 'px'};\n  width: ${(props) => props.width + 'px'};\n  background-color: red;\n`;\n\nexport function PToColor() {\n  const [color, setColor] = useState('');\n  const [hue, setHue] = useState('');\n  const [luminosity, setLuminosity] = useState('');\n  const [height, setHeight] = useState('100');\n  const [width, setWidth] = useState('100');\n  const [draftHeight, setDraftHeight] = useState('100');\n  const [draftWidth, setDraftWidth] = useState('100');\n\n  function updateColor() {\n    return setColor(\n      randomColor({\n        luminosity: luminosity.target.value,\n        hue: hue.target.value,\n      }),\n    );\n  }\n\n  function drawBox() {\n    setHeight(draftHeight);\n    setWidth(draftWidth);\n  }\n\n  return (\n    <div>\n      <StyledP color={color}>This text has color : {color}.</StyledP>\n      <p>\n        <label htmlFor=\"hue\">Hue: </label>\n        <input type=\"text\" id=\"hue\" onChange={setHue} />\n        <br />\n        <label htmlFor=\"luminosity\">Luminosity: </label>\n        <input type=\"text\" id=\"luminosity\" onChange={setLuminosity} />\n        <br />\n        <button onClick={updateColor}>Change color</button>\n      </p>\n      <p>\n        <label htmlFor=\"height\">Height: </label>\n        <input\n          type=\"text\"\n          id=\"height\"\n          onChange={(e) => {\n            console.log(e);\n            setDraftHeight(e.target.value);\n          }}\n        />\n        <br />\n        <label htmlFor=\"width\">Width: </label>\n        <input\n          type=\"text\"\n          id=\"width\"\n          onChange={(e) => {\n            console.log(e);\n            setDraftWidth(e.target.value);\n          }}\n        />\n        <br />\n        <button onClick={drawBox}>Draw box</button>\n      </p>\n      <StyledBox height={height} width={width} />\n    </div>\n  );\n}\n\n/* function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n} */\n\n//export default App;\n","C:\\Coding\\workspace\\reactrandomcolorgenerator\\src\\index.js",[],{"ruleId":"19","severity":1,"message":"20","line":6,"column":7,"nodeType":"21","messageId":"22","endLine":6,"endColumn":14},{"ruleId":"19","severity":1,"message":"23","line":13,"column":7,"nodeType":"21","messageId":"22","endLine":13,"endColumn":16},{"ruleId":"24","severity":1,"message":"25","line":105,"column":1,"nodeType":"26","messageId":"27","endLine":105,"endColumn":22,"fix":"28"},"@typescript-eslint/naming-convention","Variable name `StyledP` must match one of the following formats: camelCase","Identifier","doesNotMatchFormat","Variable name `StyledBox` must match one of the following formats: camelCase","spaced-comment","Expected space or tab after '//' in comment.","Line","expectedSpaceAfter",{"range":"29","text":"30"},[2686,2686]," "]